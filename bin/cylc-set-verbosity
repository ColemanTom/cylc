#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2017 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [control] set-verbosity [OPTIONS] ARGS

Change the logging priority level of a running suite.  Only messages at
or above the chosen priority level will be logged; for example, if you
choose WARNING, only warnings and critical messages will be logged."""

from logging import CRITICAL, ERROR, WARNING, INFO, DEBUG
import sys

if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove('--use-ssh')
    from cylc.remote import remrun
    if remrun().execute(force_required=True):
        sys.exit(0)

import cylc.flags
from cylc.prompt import prompt
from cylc.network.suite_command import SuiteCommandClient
from cylc.option_parsers import CylcOptionParser as COP

LOGGING_LVL_OF = {
    "INFO": INFO,
    "NORMAL": INFO,
    "WARNING": WARNING,
    "ERROR": ERROR,
    "CRITICAL": CRITICAL,
    "DEBUG": DEBUG,
}


def main():
    parser = COP(
        __doc__, pyro=True,
        argdoc=[
            ('REG', 'Suite name'),
            ('LEVEL', ', '.join(LOGGING_LVL_OF.keys()))
        ]
    )
    (options, args) = parser.parse_args()
    suite = args[0]

    priority_str = args[1]
    try:
        priority = LOGGING_LVL_OF[priority_str]
    except KeyError:
        parser.error("Illegal logging level, %s" % priority)

    prompt("Set logging level to %s in %s" % (priority_str, suite),
           options.force)
    pclient = SuiteCommandClient(
        suite, options.owner, options.host, options.pyro_timeout,
        options.port, options.db, my_uuid=options.set_uuid,
        print_uuid=options.print_uuid)

    pclient.put_command('set_verbosity', priority)


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(str(exc))
